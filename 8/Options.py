# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Options(combo)2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSize
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QPushButton
from PyQt5.QtGui import QIcon, QPixmap
import json
import os
import time
import ctypes
user32 = ctypes.windll.user32
user32.SetProcessDPIAware()
ax, wae = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)]
from PyQt5.QtWidgets import QMessageBox


class Ui_Options(object):
    
    def add_menu(self, data, menu_obj):
            if isinstance(data, dict):
                for k, v in data.items():
                    sub_menu = QtWidgets.QMenu(k, menu_obj)
                #     sub_menu.setGeometry(50, 10, None, None)
                    menu_obj.addMenu(sub_menu)
                    self.add_menu(v, sub_menu)
            elif isinstance(data, list):
                for element in data:
                    self.add_menu(element, menu_obj)

            else:
                action = menu_obj.addAction(data)
                action.setIconVisibleInMenu(False)


    def menu_triggered(self, binary, text):
        binary.setText(text)
        menu_obj = binary.menu()
        menu_obj.close()

    def setupUi(self, Options):


        # Define the image label object and set its properties
        self.image_label = QtWidgets.QLabel(Options)
        self.image_label.setGeometry(QtCore.QRect(10, 10, 200, 200))
        self.image_label.setText("")
        self.image_label.setScaledContents(True)
        self.image_path = ""  # add a new attribute to store the file path of the selected image


        Options.setObjectName("Options")
        Options.resize(400, 632)
        self.centralwidget = QtWidgets.QWidget(Options)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.frame)
        self.commandLinkButton.setGeometry(QtCore.QRect(270, 0, 111, 41))
        self.commandLinkButton.setStyleSheet("color: rgb(89, 89, 89);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(146, 93, 221, 255), stop:1 rgba(109, 255, 189, 255));\n"
"border-width: 10px;\n"
"")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/Icons/world.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.commandLinkButton.setIcon(icon)
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.pushButton_20 = QtWidgets.QPushButton(self.frame)
        self.pushButton_20.setGeometry(QtCore.QRect(280, 50, 88, 32))
        self.pushButton_20.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_20.setMaximumSize(QtCore.QSize(88, 32))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.pushButton_20.setFont(font)
        self.pushButton_20.setStyleSheet("QPushButton:checked {\n"
"background-color: rgb(238, 255, 1);\n"
"color: black;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_20.setCheckable(True)
        self.pushButton_20.setObjectName("pushButton_20")
        self.buttonGroup = QtWidgets.QButtonGroup(Options)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.pushButton_20)
        self.pushButton_17 = QtWidgets.QPushButton(self.frame)
        self.pushButton_17.setGeometry(QtCore.QRect(10, 50, 88, 32))
        self.pushButton_17.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_17.setMaximumSize(QtCore.QSize(88, 32))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_17.setFont(font)
        self.pushButton_17.setStyleSheet("QPushButton:checked {\n"
"background-color: rgb(238, 255, 1);\n"
"color: black;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_17.setCheckable(True)
        self.pushButton_17.setAutoRepeat(False)
        self.pushButton_17.setObjectName("pushButton_17")
        self.buttonGroup.addButton(self.pushButton_17)

        self.pushButton_22 = QtWidgets.QPushButton(self.frame)
        self.pushButton_22.setGeometry(QtCore.QRect(0, 3, 88, 32))
        self.pushButton_22.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_22.setMaximumSize(QtCore.QSize(88, 32))
        self.pushButton_22.setFont(font)
        self.pushButton_22.setStyleSheet("QPushButton:checked {\n"
"background-color: none;\n"
"color: rgb(89, 89, 89);\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: none;\n"
"  border-radius: 15px;\n"
"  color: rgb(89, 89, 89);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_22.setCheckable(True)
        self.pushButton_22.setAutoRepeat(False)
        self.pushButton_22.setObjectName("pushButton_22")

        self.pushButton_18 = QtWidgets.QPushButton(self.frame)
        self.pushButton_18.setGeometry(QtCore.QRect(100, 50, 88, 32))
        self.pushButton_18.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_18.setMaximumSize(QtCore.QSize(88, 32))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.pushButton_18.setFont(font)
        self.pushButton_18.setStyleSheet("QPushButton:checked {\n"
"background-color: rgb(238, 255, 1);\n"
"color: black;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_18.setCheckable(True)
        self.pushButton_18.setChecked(True)
        self.pushButton_18.setObjectName("pushButton_18")
        self.buttonGroup.addButton(self.pushButton_18)
        self.pushButton_19 = QtWidgets.QPushButton(self.frame)
        self.pushButton_19.setGeometry(QtCore.QRect(190, 50, 88, 32))
        self.pushButton_19.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_19.setMaximumSize(QtCore.QSize(88, 32))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.pushButton_19.setFont(font)
        self.pushButton_19.setStyleSheet("QPushButton:checked {\n"
"background-color: rgb(238, 255, 1);\n"
"color: black;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_19.setCheckable(True)
        self.pushButton_19.setObjectName("pushButton_19")
        self.buttonGroup.addButton(self.pushButton_19)
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(110, 120, 111, 16))
        self.label.setStyleSheet("font: 8pt \"Work Sans Light\";")
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(20, 120, 71, 71))
        self.pushButton.setStyleSheet("\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: #f2f2f2;\n"
"  border: none;\n"
"  border-radius: 10px;\n"
"  color: black;\n"
"}\n"
"\n"
"\n"
"QPushButton:pressed {\n"
"  /* Change the background color when the button is pressed */\n"
"  background-color: #3d3d3d;\n"
"  color: white;\n"
"}")
        self.pushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icons/Icons/insert (512).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setIconSize(QtCore.QSize(35, 35))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(110, 140, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("QLineEdit {\n"
"    border: 1px solid black;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(242, 242, 242);\n"
"    border-color: #f2f2f2;\n"
"}\n"
"\n"
"QLineEdit::placeholder {\n"
"    padding-left:10px;\n"
"}")
        self.lineEdit.setText("")
        self.lineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.setObjectName("lineEdit")
        self.checkBox = QtWidgets.QCheckBox(self.frame)
        self.checkBox.setGeometry(QtCore.QRect(110, 170, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        font.setPointSize(8)
        self.checkBox.setFont(font)
        self.checkBox.setStyleSheet("")
        self.checkBox.setObjectName("checkBox")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(20, 210, 341, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(40, 240, 301, 41))
        self.frame_2.setStyleSheet("    border: 1px solid black;\n"
"    border-radius: 20px;\n"
"    background-color: rgb(242, 242, 242);\n"
"    border-color: #f2f2f2;\n"
"")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        menu = QtWidgets.QMenu()
        menu.setStyleSheet("""
        QMenu {
            font: 8pt "Work Sans Medium";
            background-color: #3e3e3e;
            color: white;
            border-radius: 13px;
            border: 2px solid #3e3e3e;
        }

        QMenu::item:selected {
            background-color: #af55ff;
            color: white; 
        }

        /* set the color for the disabled item */
        QMenu::item:disabled {
        background-color: #3e3e3e;
        color: White;
        }
        """)
        menu.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.FramelessWindowHint)
        #menu.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        menu.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        alphanumerics = [str(i) for i in range(10)] + [chr(i) for i in range(ord('A'), ord('Z')+1)]
        function_keys = ['F{}'.format(i) for i in range(1, 25)]

        K1 = [
            '←', '→', '↑', '↓', 'Tab', 'Space', 'Esc', 'Return', 'Backspace', 'Home', 'End', 'PgUp',
            'PgDown', 'Help', 'Del', 'Execute', 'ins', 'Print', 'Printer', 'Select', {'Alphanumeric': alphanumerics},
            {'Numpad': ['Numpad 0', 'Numpad 1', 'Numpad 2','Numpad 3','Numpad 4', 'Numpad 5','Numpad 6','Numpad 7','Numpad 8','Numpad 9',
            'Numpad *','Numpad +','Numpad -','Numpad .','Numpad /','Numpad Clear', 'Numpad Enter' ]},
            {'F-Keys': function_keys},
           {'Others': ["'",',','-','.','/',';','=','Back','Clear','Favourites','Forward','Home Page','Launch (0)','Launch (1)',
           'Launch Mail','Media Next','Media Play','Media Previous','Media Stop','Menu','Pause','Play','Refresh','Search','Sleep',
           'Stop','Volume Down','Volume Mute','Volume Up','Zoom','[','\\',']']},
           'Shift','Ctrl','Alt','Win' 
        ]

        binary = QtWidgets.QToolButton(self.frame_2)
        binary.setText("Keystroke 1")
        binary.setStyleSheet('''
                    font: 8pt "Work Sans";
                    background-color: white;
                    color: black;
                    border-radius: 8px;
                    text-align: left;
                   
                    ''')
        binary.setGeometry(QtCore.QRect(50, 10, 221, 21))
        binary.setPopupMode(QtWidgets.QToolButton.InstantPopup)
        menu.triggered.connect(lambda x: self.menu_triggered(binary, x.text()))

        binary.setMenu(menu)
        self.add_menu(K1, menu)
  
    
#     def mousePressEvent(self, event):
#         # Hide the menu if the mouse press event occurred outside the menu
#         if self.binary.menu().isVisible() and not self.binary.menu().rect().contains(event.pos()):
#             self.binary.menu().hide()

#         # Call the base class implementation of the event handler
#         super().mousePressEvent(event) 

#         self.comboBox = QtWidgets.QComboBox(self.frame_2)
#         self.comboBox.setGeometry(QtCore.QRect(50, 10, 221, 22))
#         self.comboBox.setStyleSheet("/*style for the QComboBox*/\n"
# "#comboBox {\n"
# "    \n"
# "    background-color: rgb(255, 255, 255);\n"
# "    border: 1px solid #ced4da;\n"
# "    border-radius: 10px;\n"
# "    font: 8pt \"Work Sans Light\";\n"
# "    padding-left: 8px;\n"
# "    border-color: white;\n"
# "}\n"
# "\n"
# "/*style for dropdown area*/\n"
# "#comboBox::drop-down {\n"
# "    border: 0px;\n"
# "}\n"
# "\n"
# "/*style for dropdown arrow*/\n"
# "#comboBox::down-arrow {\n"
# "    \n"
# "    image: url(:/Icons/Icons/drop-down-arrow.png);\n"
# "    width: 10px;\n"
# "    height: 10px;\n"
# "    margin-right: 15px;\n"
# "}\n"
# "\n"
# "/*style for QComboBox after open select menu*/\n"
# "#comboBox:on {\n"
# "    border: 4px solid white;\n"
# "}\n"
# "\n"
# "/*style for list menu*/\n"
# "#comboBox QListView {\n"
# "    font-size: 12px;\n"
# "    border: 1px solid rgba(0,0,0,10%);\n"
# "    padding: 8px;\n"
# "    background-color: #3C3C3C;\n"
# "    color: rgb(255, 255, 255);\n"
# "    outline: 0px;\n"
# "} \n"
# " \n"
# "/*style for list items*/\n"
# "#comboBox QListIView::item {\n"
# "    padding-left: 10px;\n"
# "    background-color: #fff;\n"
# "}\n"
# "\n"
# "#comboBox QListIView::item:hover {\n"
# "    background-color: #1e90ff;\n"
# "}\n"
# "\n"
# "#comboBox QListIView::item:selected {\n"
# "    background-color: #1e90ff;\n"
# "}\n"
# "\n"
# "\n"
# "QScrollBar:vertical {\n"
# "    border: none;\n"
# "    background: #333;\n"
# "    width: 8px;\n"
# "    margin: 0px 0 0px 0;\n"
# "}\n"
# "\n"
# "QScrollBar::handle:vertical {\n"
# "    background: white;\n"
# "    min-height: 20px;\n"
# "}\n"
# "\n"
# "QScrollBar::add-line:vertical {\n"
# "    border: none;\n"
# "    background: none;\n"
# "}\n"
# "\n"
# "QScrollBar::sub-line:vertical {\n"
# "    border: none;\n"
# "    background: none;\n"
# "}\n"
# "\n"
# "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
# "    background: none;\n"
# "}")
#         self.comboBox.setObjectName("comboBox")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
#         self.comboBox.addItem("")
        self.toolButton = QtWidgets.QToolButton(self.frame_2)
        self.toolButton.setGeometry(QtCore.QRect(10, 10, 31, 21))
        self.toolButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icons/Icons/options2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton.setIcon(icon2)
        self.toolButton.setObjectName("toolButton")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setGeometry(QtCore.QRect(40, 320, 301, 41))
        self.frame_3.setStyleSheet("    border: 1px solid black;\n"
"    border-radius: 20px;\n"
"    background-color: rgb(242, 242, 242);\n"
"    border-color: #f2f2f2;\n"
"")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")

        menu_2 = QtWidgets.QMenu()
        menu_2.setStyleSheet("""
        QMenu {
            font: 8pt "Work Sans Medium";
            background-color: #3e3e3e;
            color: white;
            border-radius: 13px;
            border: 2px solid #3e3e3e;
        }

        QMenu::item:selected {
            background-color: #af55ff;
            color: white; 
        }

        /* set the color for the disabled item */
        QMenu::item:disabled {
        background-color: #3e3e3e;
        color: White;
        }
        """)
        menu_2.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.FramelessWindowHint)
        #menu.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        menu_2.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        
        K2 = [
            "21", "22", "Shift", "Z"
        ]
        binary_2 = QtWidgets.QToolButton(self.frame_3)
        binary_2.setText("Keystroke 2")
        binary_2.setStyleSheet('''
                    font: 8pt "Work Sans";
                    background-color: white;
                    color: black;
                    border-radius: 8px;
                    text-align: left;
                   
                    ''')
        binary_2.setGeometry(QtCore.QRect(50, 10, 221, 21))
        binary_2.setPopupMode(QtWidgets.QToolButton.InstantPopup)
        menu_2.triggered.connect(lambda y: self.menu_triggered(binary_2, y.text()))

        binary_2.setMenu(menu_2)
        self.add_menu(K2, menu_2)

#         self.comboBox_2 = QtWidgets.QComboBox(self.frame_3)
#         self.comboBox_2.setGeometry(QtCore.QRect(50, 10, 221, 21))
#         self.comboBox_2.setStyleSheet("QComboBox {\n"
# "    font: 8pt \"Work Sans Light\";\n"
# "    background-color: rgb(255, 255, 255);\n"
# "    border: 1px solid black;\n"
# "    border-radius: 10px;\n"
# "    border-color: white;\n"
# "    padding-left: 8px;\n"
# "    height: 30px;\n"
# "}\n"
# "\n"
# "QComboBox:on {\n"
# "    border: 4px solid white;\n"
# "}\n"
# "\n"
# "QComboBox::drop-down {\n"
# "    width: 30px;\n"
# "    border-left-width: 0px;\n"
# "    border-top-right-radius: 20px;\n"
# "    border-bottom-right-radius: 20px;\n"
# " \n"
# "}\n"
# "\n"
# "QComboBox::down-arrow {\n"
# "    image: url(:/Icons/Icons/drop-down-arrow.png);\n"
# "    width: 10px;\n"
# "    height: 10px;\n"
# "}\n"
# "\n"
# "QComboBox QAbstractItemView {\n"
# "    border: 9px solid #3e3e3e;\n"
# "    background-color: #3d3d3d;\n"
# "    color: white;\n"
# "    padding-left: 2px;\n"
# "    selection-background-color: #1682e6;\n"
# "    outline: 0px;\n"
# "}\n"
# "\n"
# "QComboBox QAbstractItemView::item {\n"
# "    height: 30px;\n"
# "    padding-left: 10px;\n"
# "}\n"
# "\n"
# "QScrollBar:vertical {\n"
# "    border: none;\n"
# "    background: #333;\n"
# "    width: 8px;\n"
# "    margin: 0px 0 0px 0;\n"
# "}\n"
# "\n"
# "QScrollBar::handle:vertical {\n"
# "    background: white;\n"
# "    min-height: 20px;\n"
# "}\n"
# "\n"
# "QScrollBar::add-line:vertical {\n"
# "    border: none;\n"
# "    background: none;\n"
# "}\n"
# "\n"
# "QScrollBar::sub-line:vertical {\n"
# "    border: none;\n"
# "    background: none;\n"
# "}\n"
# "\n"
# "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
# "    background: none;\n"
# "}")
#         self.comboBox_2.setObjectName("comboBox_2")
#         self.comboBox_2.addItem("")
#         self.comboBox_2.addItem("")
#         self.comboBox_2.addItem("")
#         self.comboBox_2.addItem("")
#         self.comboBox_2.addItem("")
        self.toolButton_2 = QtWidgets.QToolButton(self.frame_3)
        self.toolButton_2.setGeometry(QtCore.QRect(10, 10, 31, 21))
        self.toolButton_2.setText("")
        self.toolButton_2.setIcon(icon2)
        self.toolButton_2.setObjectName("toolButton_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(150, 290, 81, 20))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("    border: 1px solid black;\n"
"    border-radius: 10px;\n"
"    background-color: rgb(242, 242, 242);\n"
"    border-color: #f2f2f2;\n"
"")
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_3.setGeometry(QtCore.QRect(150, 370, 81, 20))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setStyleSheet("    border: 1px solid black;\n"
"    border-radius: 10px;\n"
"    background-color: rgb(242, 242, 242);\n"
"    border-color: #f2f2f2;\n"
"")
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 500, 361, 31))
        self.pushButton_2.clicked.connect(self.save_profile)        
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border: none;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  background-color:nocolor;\n"
"  color: rgb(173, 173, 173)\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"  /* Change the background color when the button is pressed */\n"
"  background-color: rgb(238, 255, 1);\n"
"  color: black;\n"
"}")
        self.pushButton_2.setObjectName("pushButton_2")
        self.frame_4 = QtWidgets.QFrame(self.frame)
        self.frame_4.setGeometry(QtCore.QRect(40, 400, 301, 41))
        self.frame_4.setStyleSheet("    border: 1px solid black;\n"
"    border-radius: 20px;\n"
"    background-color: rgb(242, 242, 242);\n"
"    border-color: #f2f2f2;\n"
"")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")

        menu_3 = QtWidgets.QMenu()
        menu_3.setStyleSheet("""
        QMenu {
            font: 8pt "Work Sans Medium";
            background-color: #3e3e3e;
            color: white;
            border-radius: 13px;
            border: 2px solid #3e3e3e;
        }

        QMenu::item:selected {
            background-color: #af55ff;
            color: white; 
        }

        /* set the color for the disabled item */
        QMenu::item:disabled {
        background-color: #3e3e3e;
        color: White;
        }
        """)
        menu_3.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.FramelessWindowHint)
        menu_3.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        
        K3 = [
            "31", "32", "33", "Y"
        ]
        binary_3 = QtWidgets.QToolButton(self.frame_4)
        binary_3.setText("Keystroke 3")
        binary_3.setStyleSheet('''
                    font: 8pt "Work Sans";
                    background-color: white;
                    color: black;
                    border-radius: 8px;
                    text-align: left;
                   
                    ''')
        binary_3.setGeometry(QtCore.QRect(50, 10, 221, 21))
        binary_3.setPopupMode(QtWidgets.QToolButton.InstantPopup)
        menu_3.triggered.connect(lambda y: self.menu_triggered(binary_3, y.text()))

        binary_3.setMenu(menu_3)
        self.add_menu(K3, menu_3)

#         self.comboBox_3 = QtWidgets.QComboBox(self.frame_4)
#         self.comboBox_3.setGeometry(QtCore.QRect(50, 10, 221, 22))
#         self.comboBox_3.setStyleSheet("QComboBox {\n"
# "    font: 8pt \"Work Sans Light\";\n"
# "    background-color: rgb(255, 255, 255);\n"
# "    border: 1px solid black;\n"
# "    border-radius: 10px;\n"
# "    border-color: white;\n"
# "    padding-left: 8px;\n"
# "    height: 30px;\n"
# "}\n"
# "\n"
# "QComboBox:on {\n"
# "    border: 4px solid white;\n"
# "}\n"
# "\n"
# "QComboBox::drop-down {\n"
# "    width: 30px;\n"
# "    border-left-width: 0px;\n"
# "    border-top-right-radius: 10px;\n"
# "    border-bottom-right-radius: 10px;\n"
# " \n"
# "}\n"
# "\n"
# "QComboBox::down-arrow {\n"
# "    image: url(:/Icons/Icons/drop-down-arrow.png);\n"
# "    width: 10px;\n"
# "    height: 10px;\n"
# "}\n"
# "\n"
# "QComboBox QAbstractItemView {\n"
# "    border: 9px solid #3e3e3e;\n"
# "    background-color: #3d3d3d;\n"
# "    color: white;\n"
# "    padding-left: 2px;\n"
# "    selection-background-color: #1682e6;\n"
# "    outline: 0px;\n"
# "}\n"
# "\n"
# "QComboBox QAbstractItemView::item {\n"
# "    height: 30px;\n"
# "    padding-left: 10px;\n"
# "}\n"
# "\n"
# "QScrollBar:vertical {\n"
# "    border: none;\n"
# "    background: #333;\n"
# "    width: 8px;\n"
# "    margin: 0px 0 0px 0;\n"
# "}\n"
# "\n"
# "QScrollBar::handle:vertical {\n"
# "    background: white;\n"
# "    min-height: 20px;\n"
# "}\n"
# "\n"
# "QScrollBar::add-line:vertical {\n"
# "    border: none;\n"
# "    background: none;\n"
# "}\n"
# "\n"
# "QScrollBar::sub-line:vertical {\n"
# "    border: none;\n"
# "    background: none;\n"
# "}\n"
# "\n"
# "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
# "    background: none;\n"
# "}")
#         self.comboBox_3.setObjectName("comboBox_3")
#         self.comboBox_3.addItem("")
#         self.comboBox_3.addItem("")
#         self.comboBox_3.addItem("")
#         self.comboBox_3.addItem("")
#         self.comboBox_3.addItem("")
        self.toolButton_3 = QtWidgets.QToolButton(self.frame_4)
        self.toolButton_3.setGeometry(QtCore.QRect(10, 9, 31, 20))
        self.toolButton_3.setText("")
        self.toolButton_3.setIcon(icon2)
        self.toolButton_3.setObjectName("toolButton_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_4.setGeometry(QtCore.QRect(150, 450, 81, 20))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setStyleSheet("    border: 1px solid black;\n"
"    border-radius: 10px;\n"
"    background-color: rgb(242, 242, 242);\n"
"    border-color: #f2f2f2;\n"
"")
        self.lineEdit_4.setText("")
        self.lineEdit_4.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.frame_5 = QtWidgets.QFrame(self.frame)
        self.frame_5.setGeometry(QtCore.QRect(30, 400, 331, 71))
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.addKeystrokeButton = QtWidgets.QPushButton(self.frame_5)
        self.addKeystrokeButton.setGeometry(QtCore.QRect(10, 20, 301, 31))
        self.addKeystrokeButton.setStyleSheet("\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: #f2f2f2;\n"
"  border: none;\n"
"  border-radius: 15px;\n"
"  color: black;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  background-color: #e5e5e5;\n"
"  color: black;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"  /* Change the background color when the button is pressed */\n"
"  background-color: #3d3d3d;\n"
"  color: white;\n"
"}")
        self.addKeystrokeButton.setObjectName("addKeystrokeButton")
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        Options.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Options)
        self.statusbar.setObjectName("statusbar")
        Options.setStatusBar(self.statusbar)

        self.retranslateUi(Options)
        QtCore.QMetaObject.connectSlotsByName(Options)

        self.addKeystrokeButton.clicked.connect(self.hide_button)
        self.addKeystrokeButton.clicked.connect(self.hide_frame_5)

    def hide_frame_5(self):
        self.frame_5.hide()
        self.addKeystrokeButton.hide()

    def hide_button(self):
        self.addKeystrokeButton.setVisible(False)


    def save_profile(self):
        # Get the relevant information from the UI widgets
        if self.image_path is None:
                # show an error message if no image is selected
                QMessageBox.warning(self.centralwidget, "Warning", "Please select an image first.")
                return

        image_path = self.image_path  # get the original image file path
        file_name, ext = os.path.splitext(image_path)  # get the file name and extension
        png_path = f"{file_name}.png"  # set the PNG file path with the original file name
        self.image_label.pixmap().save(png_path, "PNG")  # save the image as a PNG file
        settings = {"action": self.lineEdit.text(),
                "delay": self.lineEdit_2.text(),
                "delay2": self.lineEdit_3.text(),
                "delay3": self.lineEdit_4.text(),
                # "combobox1": self.comboBox.currentText(),
                # "combobox2": self.comboBox_2.currentText(),
                # "combobox3": self.comboBox_3.currentText(),
                "checkbox": self.checkBox.isChecked()}

        # Create a dictionary with the image path and settings
        profile = {"image_path": image_path, "settings": settings}


        # Write the dictionary to a JSON file inside the "Profiles" folder
        folder_path = "Profiles"
        os.makedirs(folder_path, exist_ok=True)  # create the folder if it doesn't exist
        file_name = "NOMAD_" + str(int(time.time())) + ".json"
        file_path = os.path.join(folder_path, file_name)
        with open(file_path, 'w') as file:
                json.dump(profile, file, indent=4)


    def retranslateUi(self, Options):
        _translate = QtCore.QCoreApplication.translate
        Options.setWindowTitle(_translate("Options", "ThirdWindow"))
        Options.setGeometry(QtCore.QRect(int(ax*0.106)+678, int(wae*0.065), 400, 623))
        Options.setWindowFlags(QtCore.Qt.WindowType.FramelessWindowHint)
        Options.setFixedHeight(623)
        Options.setFixedWidth(400)
        Options.setWindowFlag(QtCore.Qt.Tool) # No Taskbar appearance
        self.commandLinkButton.setText(_translate("Options", "Community "))
        self.pushButton_20.setText(_translate("Options", "Lighting"))
        self.pushButton_17.setText(_translate("Options", "Basic"))
        self.pushButton_22.setText(_translate("CreateAction", "←  Back"))
        self.pushButton_22.clicked.connect(Options.close)
        self.pushButton_18.setText(_translate("Options", "Action"))
        self.pushButton_19.setText(_translate("Options", "MIDI"))
        self.label.setText(_translate("Options", "Name your action:"))
        self.lineEdit.setPlaceholderText(_translate("Options", "  Insert action here..."))
        self.checkBox.setText(_translate("Options", "enable multi-tap"))
        # self.comboBox.setItemText(0, _translate("Options", "Keystroke 1"))
        # self.comboBox.setItemText(1, _translate("Options", "Differentiate left/right modifiers"))
        # self.comboBox.setItemText(2, _translate("Options", "Alphanumerics"))
        # self.comboBox.setItemText(3, _translate("Options", "¤  ←"))
        # self.comboBox.setItemText(4, _translate("Options", "¤  →"))
        # self.comboBox.setItemText(5, _translate("Options", "¤  ↑"))
        # self.comboBox.setItemText(6, _translate("Options", "¤  ↓"))
        # self.comboBox.setItemText(7, _translate("Options", "¤  Tab"))
        # self.comboBox.setItemText(8, _translate("Options", "¤  Space"))
        # self.comboBox.setItemText(9, _translate("Options", "¤  Esc"))
        # self.comboBox.setItemText(10, _translate("Options", "¤  Return"))
        # self.comboBox.setItemText(11, _translate("Options", "¤  Backspace"))
        # self.comboBox.setItemText(12, _translate("Options", "¤  Home"))
        # self.comboBox.setItemText(13, _translate("Options", "¤  End"))
        # self.comboBox.setItemText(14, _translate("Options", "¤  PgUp"))
        # self.comboBox.setItemText(15, _translate("Options", "¤  PgDown"))
        # self.comboBox.setItemText(16, _translate("Options", "¤  Help"))
        # self.comboBox.setItemText(17, _translate("Options", "¤  Del"))
        # self.comboBox.setItemText(18, _translate("Options", "Numpad"))
        # self.comboBox.setItemText(19, _translate("Options", "F-Keys"))
        # self.comboBox.setItemText(20, _translate("Options", "Others"))
        # self.comboBox.setItemText(21, _translate("Options", "Ctrl"))
        # self.comboBox_2.setItemText(0, _translate("Options", "Keystroke 2"))
        # self.comboBox_2.setItemText(1, _translate("Options", "21"))
        # self.comboBox_2.setItemText(2, _translate("Options", "22"))
        # self.comboBox_2.setItemText(3, _translate("Options", "Shift"))
        # self.comboBox_2.setItemText(4, _translate("Options", "Z"))
        self.lineEdit_2.setPlaceholderText(_translate("Options", "+ add delay"))
        self.lineEdit_3.setPlaceholderText(_translate("Options", "+ add delay"))
        self.pushButton_2.setText(_translate("Options", "Save"))
        # self.comboBox_3.setItemText(0, _translate("Options", "Keystroke 3"))
        # self.comboBox_3.setItemText(1, _translate("Options", "31"))
        # self.comboBox_3.setItemText(2, _translate("Options", "32"))
        # self.comboBox_3.setItemText(3, _translate("Options", "33"))
        # self.comboBox_3.setItemText(4, _translate("Options", "Y"))
        self.lineEdit_4.setPlaceholderText(_translate("Options", "+ add delay"))
        self.addKeystrokeButton.setText(_translate("Options", "+ Add Keystroke"))
        self.pushButton.clicked.connect(self.pushButton_handler)
        self.pushButton_2.clicked.connect(self.show_dialog)

    def pushButton_handler(self):
        filename, _ = QFileDialog.getOpenFileName()
        if filename:
            pixmap = QPixmap(filename)
            icon = QIcon(pixmap)
            self.pushButton.setIcon(icon)
            self.pushButton.setIconSize(QSize(64, 64))
            self.image_label.setPixmap(pixmap)  # set the loaded pixmap to the image_label
            self.image_path = filename  # update the image_path attribute with the selected file path

    def show_dialog(self):
        dialog = QMessageBox()
        dialog.setText('Profile has been saved')
        dialog.setWindowTitle('NOMAD')
        dialog.setIcon(QMessageBox.Warning)
        dialog.exec_()        


import icons_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Options = QtWidgets.QMainWindow()
    ui = Ui_Options()
    ui.setupUi(Options)
    Options.show()
    sys.exit(app.exec_())
