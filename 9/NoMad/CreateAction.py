# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CreateAction.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QLabel
from Options import Ui_Options
import os
import json
import ctypes
user32 = ctypes.windll.user32
user32.SetProcessDPIAware()
ax, wae = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)]

class Ui_CreateAction(object):
    def openWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_Options()
        self.ui.setupUi(self.window)
        self.window.show()

    def action(self, var, place, num):

        self.pushButton = QtWidgets.QPushButton(place)
        self.pushButton.setGeometry(QtCore.QRect(num[0], num[1], 51, 51))
        self.pushButton.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton.setMaximumSize(QtCore.QSize(51, 51))
        font = QtGui.QFont()
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("\n"
        "\n"
        "QPushButton {\n"
        "  /* Set the background color and border for the button */\n"
        "  background-color: #f2f2f2;\n"
        "  border: none;\n"
        "  border-radius: 10px;\n"
        "  padding: 10px 12px;\n"
        "\n"
        "}\n"
        "\n"
        "QPushButton:hover {\n"
        "  /* Change the background color when the button is hovered over */\n"
        "  background-color: #e5e5e5;\n"
        "  color: black;\n"
        "}\n"
        "\n"
        "QPushButton:pressed {\n"
        "  /* Change the background color when the button is pressed */\n"
        "  background-color: #3d3d3d;\n"
        "  color: white;\n"
        "}\n"
        "\n"
        "")
        self.pushButton.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(var['image_path']), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pushButton.setIcon(icon5)
        self.pushButton.setIconSize(QtCore.QSize(35, 35))
        # self.label = QtWidgets.QLabel(self.frame)
        # self.label.setGeometry(QtCore.QRect(num[0]+3, num[1]+50, 45, 23))
        # self.label.setStyleSheet("font: 8pt \"Work Sans Medium\";")
        # self.label.setObjectName("label")
        # self.label.setText(var['settings']['action'][:7])
        # self.label.setToolTip(var['settings']['action'])
        # self.label.setAlignment(QtCore.Qt.AlignCenter)
        # print(var['settings']['action'])
        # self.pushButton.setToolTip(var['settings']['action'])
        # label_it = QLabel()
        # pixmap1 = icon5.pixmap(num[0]*2, num[1]*2, QtGui.QIcon.Active, QtGui.QIcon.On)
        # label_it.setPixmap(pixmap1)
        self.pushButton.setToolTip(var['settings']['action'])

    def buttonz(self, a):
        Flag = True
        list = []
        count = 0
        count2 = 0
        xx = [20, 80, 140, 200, 260]
        x = []
        y = 190
        max_iter = 1200

        # Number of x
        while Flag and count2 < max_iter:
            for i in xx:
                x.append(i)
                if len(x) == a:
                    Flag = False
            count2 +=1
                
        # y distancing
        for i in range(a):
            # After 5 counts increase y by 60
            if count%5==0 and count!=0:
                # increased y for new line
                y += 60
                
            list.append([x[i],y])
            count+=1
        return list
    
    def resource_path(self, relative_path):
        """ Get absolute path to resource, works for dev and for PyInstaller """
        """ https://youtu.be/xJAM8_Lx5mY """
        try:
            # PyInstaller creates a temp folder and stores path in _MEIPASS
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")

        return os.path.join(base_path, relative_path)
    
        
    def setupUi(self, CreateAction):
        
        CreateAction.setObjectName("CreateAction")
        CreateAction.resize(400, 632)
        self.centralwidget = QtWidgets.QWidget(CreateAction)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        if not os.path.exists(self.resource_path('Profiles')):
            os.makedirs('Profiles')
        count = 0
        for file_name in os.listdir(self.resource_path('Profiles/')):
            if file_name.endswith(".json"):
                count +=1
            else:
                pass
        
        dimens = self.buttonz(count)
        var = []
        for file_name in os.listdir('Profiles/'):
            if file_name.endswith(".json"):

                with open(self.resource_path('Profiles/'+file_name)) as p:
                    var.append(json.load(p))
            else:
                pass

        if len(var) == 0 and len(dimens) == 0:
            pass
        else:
            for a,b in zip(var,dimens):
                self.action(a, self.frame, b)

        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setGeometry(QtCore.QRect(190, 50, 88, 32))
        self.pushButton_4.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_4.setMaximumSize(QtCore.QSize(88, 32))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("QPushButton:checked {\n"
"background-color: rgb(238, 255, 1);\n"
"color: black;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_4.setCheckable(True)
        self.pushButton_4.setObjectName("pushButton_4")
        self.buttonGroup = QtWidgets.QButtonGroup(CreateAction)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.pushButton_4)
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(100, 50, 88, 32))
        self.pushButton_3.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_3.setMaximumSize(QtCore.QSize(88, 32))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("QPushButton:checked {\n"
"background-color: rgb(238, 255, 1);\n"
"color: black;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_3.setCheckable(True)
        self.pushButton_3.setChecked(True)
        self.pushButton_3.setObjectName("pushButton_3")
        self.buttonGroup.addButton(self.pushButton_3)
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        self.pushButton_5.setGeometry(QtCore.QRect(280, 50, 88, 32))
        self.pushButton_5.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_5.setMaximumSize(QtCore.QSize(88, 32))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("QPushButton:checked {\n"
"background-color: rgb(238, 255, 1);\n"
"color: black;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_5.setCheckable(True)
        self.pushButton_5.setObjectName("pushButton_5")
        self.buttonGroup.addButton(self.pushButton_5)
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 50, 88, 32))
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_2.setMaximumSize(QtCore.QSize(88, 32))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("QPushButton:checked {\n"
"background-color: rgb(238, 255, 1);\n"
"color: black;\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_2.setCheckable(True)
        self.pushButton_2.setAutoRepeat(False)
        self.pushButton_2.setObjectName("pushButton_2")
        self.buttonGroup.addButton(self.pushButton_2)
#         self.commandLinkButton = QtWidgets.QCommandLinkButton(self.frame)
#         self.commandLinkButton.setGeometry(QtCore.QRect(270, 0, 111, 41))
#         font = QtGui.QFont()
#         font.setFamily("Segoe UI")
#         self.commandLinkButton.setFont(font)
#         self.commandLinkButton.setStyleSheet("color: rgb(89, 89, 89);\n"
# "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(146, 93, 221, 255), stop:1 rgba(109, 255, 189, 255));\n"
# "border-width: 10px;\n"
# "")
#         icon = QtGui.QIcon()
#         icon.addPixmap(QtGui.QPixmap(":/Icons/Icons/world.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
#         self.commandLinkButton.setIcon(icon)
#         self.commandLinkButton.setObjectName("commandLinkButton")

        self.pushButton_7 = QtWidgets.QPushButton(self.frame)
        self.pushButton_7.setGeometry(QtCore.QRect(0, 3, 88, 32))
        self.pushButton_7.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_7.setMaximumSize(QtCore.QSize(88, 32))
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("QPushButton:checked {\n"
"background-color: none;\n"
"color: rgb(89, 89, 89);\n"
"border-radius: 15px;\n"
"}\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: none;\n"
"  border-radius: 15px;\n"
"  color: rgb(89, 89, 89);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  color: rgb(173, 173, 173)\n"
"}")
        self.pushButton_7.setCheckable(True)
        self.pushButton_7.setAutoRepeat(False)
        self.pushButton_7.setObjectName("pushButton_7")

        self.pushButton_6 = QtWidgets.QPushButton(self.frame, clicked = lambda: self.openWindow())
        self.pushButton_6.setGeometry(QtCore.QRect(10, 100, 361, 31))
        self.pushButton_6.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_6.setMaximumSize(QtCore.QSize(16777215, 13516535))
        font = QtGui.QFont()
        font.setFamily("Work Sans Light")
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet("\n"
"\n"
"QPushButton {\n"
"  /* Set the background color and border for the button */\n"
"  background-color: black;\n"
"  border: none;\n"
"  border-radius: 15px;\n"
"  color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"  /* Change the background color when the button is hovered over */\n"
"  background-color:nocolor;\n"
"  color: rgb(173, 173, 173)\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"  /* Change the background color when the button is pressed */\n"
"  background-color: rgb(238, 255, 1);\n"
"  color: black;\n"
"}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(20, 160, 41, 20))
        self.label.setStyleSheet("font: 8pt \"Work Sans Medium\";")
        self.label.setObjectName("label")

        self.verticalScrollBar = QtWidgets.QScrollBar(self.frame)
        self.verticalScrollBar.setGeometry(QtCore.QRect(350, 140, 16, 331))
        self.verticalScrollBar.setStyleSheet("/*Vertical Scroll Bar*/\n"
"QScrollBar:vertical {\n"
"    border:none;\n"
"    background-color: lightgrey;\n"
"    width: 0px;\n"
"    margin: 15px 0 8px 0;\n"
"    border-radius: 8px;\n"
"}\n"
"\n"
"/*Handle Bar Vertical*/\n"
"QScrollBar::handle:vertical {\n"
"    background-color: #3c3c3c;\n"
"    min-height: 150px;\n"
"    border-radius: 8px;\n"
"}\n"
"\n"
"QScrollBar::handle:vertical:hover {\n"
"    background-color: #3c3c3c;\n"
"}\n"
"\n"
"QScrollBar::handle:vertical:pressed {\n"
"    background-color: #3c3c3c;\n"
"}\n"
"\n"
"/*BTN Top - Scroll Bar*/\n"
"QScrollBar::sub-line:vertical {\n"
"    border:none;\n"
"    background-color: lightgrey;\n"
"    height: 0px;\n"
"    border-top-left-radius: 7px;\n"
"    border-top-right-radius: 7px;\n"
"}\n"
"\n"
"QScrollBar::sub-line:vertical:hover {\n"
"    background-color: lightgrey;\n"
"}\n"
"\n"
"QScrollBar::sub-line:vertical:pressed {\n"
"    background-color: lightgrey;\n"
"}\n"
"\n"
"")
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        CreateAction.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(CreateAction)
        self.statusbar.setObjectName("statusbar")
        CreateAction.setStatusBar(self.statusbar)

        self.retranslateUi(CreateAction)
        QtCore.QMetaObject.connectSlotsByName(CreateAction)

    def retranslateUi(self, CreateAction):
        _translate = QtCore.QCoreApplication.translate
        # screen = open(self.resource_path("screen.txt"), "r+")
        # screen = screen.read().split(',')
        CreateAction.setWindowTitle(_translate("CreateAction", "SecondWindow"))

        # if the size is Medium then values else Large
        # if screen.read() == 'M':
        #     CreateAction.setGeometry(QtCore.QRect(int()+787, int()+98, 400, 525)) # ax*0.106, wae*0.065
        #     CreateAction.setFixedHeight(525)
        #     self.verticalScrollBar.setFixedHeight(wae*0.45) # 30% of y
        # else:
        CreateAction.setGeometry(QtCore.QRect(int(ax*0.106)+678, int(wae*0.065), 400, 623)) # -400, -138
        CreateAction.setFixedHeight(wae)
        self.verticalScrollBar.setFixedHeight(wae*0.55) # 30% of y

        CreateAction.setWindowFlags(QtCore.Qt.WindowType.FramelessWindowHint)
        # CreateAction.setFixedHeight(623)
        CreateAction.setFixedWidth(400)
        CreateAction.setWindowFlag(QtCore.Qt.Tool) # No Taskbar appearance
        self.pushButton_4.setText(_translate("CreateAction", "MIDI"))
        self.pushButton_3.setText(_translate("CreateAction", "Action"))
        self.pushButton_5.setText(_translate("CreateAction", "Lighting"))
        self.pushButton_2.setText(_translate("CreateAction", "Basic"))
        self.pushButton_7.setText(_translate("CreateAction", "←  Back"))
        self.pushButton_7.clicked.connect(CreateAction.close)
        # self.commandLinkButton.setText(_translate("CreateAction", "Community "))
        self.pushButton_6.setText(_translate("CreateAction", "+ Create new action"))
        self.label.setText(_translate("CreateAction", "Design"))
import icons_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    CreateAction = QtWidgets.QMainWindow()
    ui = Ui_CreateAction()
    ui.setupUi(CreateAction)
    CreateAction.show()
    sys.exit(app.exec_())
